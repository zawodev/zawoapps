import discord
import random
import asyncio
from discord.ext import commands
from datetime import datetime
import pytz

admin_ids = [336921078138011650] # zawodev
WORDS_FILE = 'word_list.txt'
tz = pytz.timezone("Europe/Warsaw")
bot = None

# ======================== WORD LIST ========================

def load_words():
    try:
        # encoding utf-8 # encoding='utf-8'
        with open(WORDS_FILE, 'r', encoding='utf-8') as f:
            return [line.strip() for line in f.readlines()]
    except FileNotFoundError:
        return []

def save_words(words):
    # encoding utf-8 # encoding='utf-8'
    with open(WORDS_FILE, 'w', encoding='utf-8') as f:
        for word in words:
            f.write(f'{word}\n')

word_list = load_words()

# ======================== TIMER ========================

async def timer():
    await bot.wait_until_ready()
    while not bot.is_closed():
        await update()
        await asyncio.sleep(60)

async def update():
    time = datetime.now(tz)
    print(time.strftime('%H:%M'))

async def setup_hook():
    bot.loop.create_task(timer())

# ======================== DISCORD BOT EVENTS ========================

async def on_voice_state_update(member, before, after):

    voice_client = None

    # na razie wy≈ÇƒÖczamy funkcje do≈ÇƒÖczania na voice call
    # return

    if member.bot: # je≈õli bot do≈ÇƒÖczy≈Ç na kana≈Ç g≈Çosowy, to nic nie r√≥b
        return

    # sprawdzamy czy u≈ºytkownik do≈ÇƒÖczy≈Ç na kana≈Ç g≈Çosowy
    if before.channel is None and after.channel is not None:
        # member do≈ÇƒÖczy≈Ç na kana≈Ç g≈Çosowy
        print(f'{member} do≈ÇƒÖczy≈Ç na kana≈Ç {after.channel}')

        # sprawdzamy, czy bot jest ju≈º na kanale, ≈ºeby nie po≈ÇƒÖczyƒá go ponownie
        if voice_client is None or not voice_client.is_connected():
            # odczekaj 1-3 sekundy
            await asyncio.sleep(random.uniform(1, 3))
            # bot nie jest na kanale, ≈ÇƒÖczymy go
            voice_client = await after.channel.connect()

    # sprawdzamy czy u≈ºytkownik opu≈õci≈Ç kana≈Ç g≈Çosowy
    if before.channel is not None and after.channel is None:
        # member opu≈õci≈Ç kana≈Ç g≈Çosowy
        print(f'{member} opu≈õci≈Ç kana≈Ç {before.channel}')

        # sprawdzamy, czy kana≈Ç g≈Çosowy jest teraz pusty, ignorujƒÖc bota
        non_bot_members = [m for m in before.channel.members if not m.bot]

        # sprawdzamy, czy kana≈Ç g≈Çosowy jest teraz pusty
        if len(non_bot_members) == 0 and voice_client is not None:
            # kana≈Ç g≈Çosowy sta≈Ç siƒô pusty, roz≈ÇƒÖczamy bota
            print(f'kana≈Ç {before.channel.name} jest teraz pusty')

            # odczekaj 1-3 sekundy
            await asyncio.sleep(random.uniform(1, 3))

            await voice_client.disconnect()
            voice_client = None

            # bot opu≈õci≈Ç kana≈Ç g≈Çosowy
            print("bot opu≈õci≈Ç kana≈Ç g≈Çosowy")


async def on_ready():

    # ustaw status bota jako niewidoczny
    await bot.change_presence(status=discord.Status.invisible)

    print(f'bot zalogowany jako {bot.user}')
    try:
        synced = await bot.tree.sync()
        print(f'Synced {len(synced)} slash commands.')
    except Exception as e:
        print(e)

    #await channel.send("bot is online")

async def on_message(message):
    if message.author == bot.user:
        return

    msg = message.content.lower()
    # get user from id 380820820466991116 (grajo)
    real_grajo = await bot.fetch_user(380820820466991116)

    if 'graj' in msg or 'marek' in msg or 'bot' in msg or bot.user.mentioned_in(message) or real_grajo.mentioned_in(message):
        action = random.randint(1, 7)
        print(action)

        async with message.channel.typing():
            await asyncio.sleep(random.uniform(1, 5))

        random_words = random.sample(word_list, random.randint(1, 5))
        last_messages = [msg async for msg in message.channel.history(limit=100)]
        random_message = random.choice(last_messages)

        if action == 1: # respond to random message with "." as a text using discord respond feature
            await random_message.reply(".")

        elif action == 2: # respond to random message with "." as a text using discord respond feature
            await random_message.reply(random_words[0])

        elif action == 3: # react to the last message with üëç
            await last_messages[0].add_reaction("üëç")

        elif action == 4: # send random word from the list
            await message.channel.send(random_words[0])

        elif action == 5: # send 1-5 random words from the list
            await message.channel.send(" ".join(random_words))

        # elif action >= 6: # do nothing

    # if message owner is grajo then add his message to the list
    if message.author.id == 1291727291881226280:
        word_list.append(message.content)
        save_words(word_list)
        await message.channel.send(f's≈Çowo "{message.content}" zosta≈Ço dodane do listy moich s≈Ç√≥w!')


    await bot.process_commands(message)



# ======================== DISCORD BOT COMMANDS ========================

async def add_word(interaction: discord.Interaction, word: str):
    word_list.append(word)
    save_words(word_list)
    await interaction.response.send_message(f's≈Çowo "{word}" zosta≈Ço dodane do listy moich s≈Ç√≥w!')


async def say_something(interaction: discord.Interaction, message: str, channel_id: int = 1250873886426402937):
    if interaction.user.id not in admin_ids:
        await interaction.response.send_message(f'nie masz uprawnie≈Ñ do u≈ºycia tej komendy')
        return

    channel = bot.get_channel(int(channel_id))
    await channel.send(message)
    await interaction.response.send_message(f'wys≈Çano wiadomo≈õƒá', ephemeral=True)


async def play_sound(interaction: discord.Interaction, channel_id: int = 1028303332193873981, sound_id: int = -1):
    global voice_client

    if interaction.user.id not in admin_ids:
        await interaction.response.send_message(f'nie masz uprawnie≈Ñ do u≈ºycia tej komendy')
        return

    await interaction.response.send_message("wys≈Çano d≈∫wiƒôk na kanale: " + interaction.channel.name, ephemeral=True)

    guild = interaction.guild  # serwer, na kt√≥rym jest bot
    voice_channel = guild.get_channel(channel_id)  # kana≈Ç g≈Çosowy na podstawie id

    if not voice_channel or not isinstance(voice_channel, discord.VoiceChannel):
        # await interaction.response.send_message("nie znaleziono kana≈Çu g≈Çosowego o podanym ID.", ephemeral=True)
        print("nie znaleziono kana≈Çu g≈Çosowego o podanym ID.")
        return

    # Do≈ÇƒÖczanie do kana≈Çu g≈Çosowego je≈õli jeszcze tam nie do≈ÇƒÖczyli≈õmy
    if voice_client is None or not voice_client.is_connected():
        voice_client = await voice_channel.connect()
        print("bot do≈ÇƒÖczy≈Ç do kana≈Çu g≈Çosowego")

    # Sprawdzamy, czy bot jest ju≈º pod≈ÇƒÖczony i czy nie gra d≈∫wiƒôku
    if voice_client.is_playing():
        # await interaction.response.send_message("bot ju≈º odtwarza d≈∫wiƒôk!", ephemeral=True)
        print("bot ju≈º odtwarza d≈∫wiƒôk!")
        return

    # Odtwarzanie d≈∫wiƒôku MP3
    if sound_id == -1:
        sound_id = random.randint(1, 3)
    sound = 'grajo' + str(sound_id) + '.mp3'

    audio_source = discord.FFmpegPCMAudio(sound)
    voice_client.play(audio_source)

    # Poczekaj, a≈º d≈∫wiƒôk siƒô sko≈Ñczy
    # while voice_client.is_playing():
    #    await asyncio.sleep(1)

    print("d≈∫wiƒôk zosta≈Ç odtworzony")

    # Opu≈õƒá kana≈Ç g≈Çosowy po zako≈Ñczeniu odtwarzania

    # await voice_client.disconnect()
    # print("bot opu≈õci≈Ç kana≈Ç g≈Çosowy")

def setup_marek_commands(new_bot):

    global bot
    bot = new_bot

    # ------------------------ COMMANDS ------------------------

    bot.tree.command(name="add_word", description="dodaj swoje ulubione s≈Çowo graja")(add_word)
    bot.tree.command(name="say_something", description="powiedz co≈õ na kanale tekstowym")(say_something)
    bot.tree.command(name="play_sound", description="odtwarzaj d≈∫wiƒôk na kanale g≈Çosowym")(play_sound)

    # ------------------------ EVENTS ------------------------

    bot.add_listener(on_voice_state_update, name="on_voice_state_update")
    bot.add_listener(on_ready, name="on_ready")
    bot.add_listener(on_message, name="on_message")

    # ------------------------ TIMER ------------------------

    bot.add_listener(setup_hook, name="setup_hook")
